
Simple traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000308  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cb  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000617  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  000011f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000578  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  64:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
/************************************************************************/
/* function definitions                                                 */
/************************************************************************/
void DIO_init (uint8_t pinNumber , uint8_t portNumber , uint8_t direction)
{
	switch (portNumber)
  6c:	62 34       	cpi	r22, 0x42	; 66
  6e:	39 f1       	breq	.+78     	; 0xbe <DIO_init+0x52>
  70:	18 f4       	brcc	.+6      	; 0x78 <DIO_init+0xc>
  72:	61 34       	cpi	r22, 0x41	; 65
  74:	39 f0       	breq	.+14     	; 0x84 <DIO_init+0x18>
  76:	08 95       	ret
  78:	63 34       	cpi	r22, 0x43	; 67
  7a:	f1 f1       	breq	.+124    	; 0xf8 <DIO_init+0x8c>
  7c:	64 34       	cpi	r22, 0x44	; 68
  7e:	09 f4       	brne	.+2      	; 0x82 <DIO_init+0x16>
  80:	58 c0       	rjmp	.+176    	; 0x132 <DIO_init+0xc6>
  82:	08 95       	ret
	{
		// PORTA
		case PORT_A:
			if (direction == IN)
  84:	41 11       	cpse	r20, r1
  86:	0e c0       	rjmp	.+28     	; 0xa4 <DIO_init+0x38>
			{
				DDRA &= ~(1<<pinNumber);
  88:	4a b3       	in	r20, 0x1a	; 26
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	b9 01       	movw	r22, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <DIO_init+0x2a>
  92:	66 0f       	add	r22, r22
  94:	77 1f       	adc	r23, r23
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <DIO_init+0x26>
  9a:	cb 01       	movw	r24, r22
  9c:	80 95       	com	r24
  9e:	84 23       	and	r24, r20
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
			}
			else
			{
				DDRA |= (1<<pinNumber);
  a4:	4a b3       	in	r20, 0x1a	; 26
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_init+0x46>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_init+0x42>
  b6:	cb 01       	movw	r24, r22
  b8:	84 2b       	or	r24, r20
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
			}
			break;
		
		//PORTB
		case PORT_B:
			if (direction == IN)
  be:	41 11       	cpse	r20, r1
  c0:	0e c0       	rjmp	.+28     	; 0xde <DIO_init+0x72>
			{
				DDRB &= ~(1<<pinNumber);
  c2:	47 b3       	in	r20, 0x17	; 23
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	b9 01       	movw	r22, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_init+0x64>
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_init+0x60>
  d4:	cb 01       	movw	r24, r22
  d6:	80 95       	com	r24
  d8:	84 23       	and	r24, r20
  da:	87 bb       	out	0x17, r24	; 23
  dc:	08 95       	ret
			}
			else
			{
				DDRB |= (1<<pinNumber);
  de:	47 b3       	in	r20, 0x17	; 23
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_init+0x80>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_init+0x7c>
  f0:	cb 01       	movw	r24, r22
  f2:	84 2b       	or	r24, r20
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	08 95       	ret
			}
			break;
		
		//PORTC
		case PORT_C:
			if (direction == IN)
  f8:	41 11       	cpse	r20, r1
  fa:	0e c0       	rjmp	.+28     	; 0x118 <DIO_init+0xac>
			{
				DDRC &= ~(1<<pinNumber);
  fc:	44 b3       	in	r20, 0x14	; 20
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_init+0x9e>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_init+0x9a>
 10e:	cb 01       	movw	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
			}
			else
			{
				DDRC |= (1<<pinNumber);
 118:	44 b3       	in	r20, 0x14	; 20
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_init+0xba>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	8a 95       	dec	r24
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_init+0xb6>
 12a:	cb 01       	movw	r24, r22
 12c:	84 2b       	or	r24, r20
 12e:	84 bb       	out	0x14, r24	; 20
 130:	08 95       	ret
			}
			break;
		
		//PORTD
		case PORT_D:
			if (direction == IN)
 132:	41 11       	cpse	r20, r1
 134:	0e c0       	rjmp	.+28     	; 0x152 <DIO_init+0xe6>
			{
				DDRD &= ~(1<<pinNumber);
 136:	41 b3       	in	r20, 0x11	; 17
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_init+0xd8>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_init+0xd4>
 148:	cb 01       	movw	r24, r22
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	81 bb       	out	0x11, r24	; 17
 150:	08 95       	ret
			}
			else
			{
				DDRD |= (1<<pinNumber);
 152:	41 b3       	in	r20, 0x11	; 17
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	b9 01       	movw	r22, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_init+0xf4>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	8a 95       	dec	r24
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_init+0xf0>
 164:	cb 01       	movw	r24, r22
 166:	84 2b       	or	r24, r20
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_write>:
	}
}

void DIO_write (uint8_t pinNumber , uint8_t portNumber , uint8_t value)
{
	switch (portNumber)
 16c:	62 34       	cpi	r22, 0x42	; 66
 16e:	39 f1       	breq	.+78     	; 0x1be <DIO_write+0x52>
 170:	18 f4       	brcc	.+6      	; 0x178 <DIO_write+0xc>
 172:	61 34       	cpi	r22, 0x41	; 65
 174:	39 f0       	breq	.+14     	; 0x184 <DIO_write+0x18>
 176:	08 95       	ret
 178:	63 34       	cpi	r22, 0x43	; 67
 17a:	f1 f1       	breq	.+124    	; 0x1f8 <DIO_write+0x8c>
 17c:	64 34       	cpi	r22, 0x44	; 68
 17e:	09 f4       	brne	.+2      	; 0x182 <DIO_write+0x16>
 180:	58 c0       	rjmp	.+176    	; 0x232 <DIO_write+0xc6>
 182:	08 95       	ret
	{
		// PORTA
		case PORT_A:
		if (value == LOW)
 184:	41 11       	cpse	r20, r1
 186:	0e c0       	rjmp	.+28     	; 0x1a4 <DIO_write+0x38>
		{
			PORTA &= ~(1<<pinNumber);	//write 0
 188:	4b b3       	in	r20, 0x1b	; 27
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_write+0x2a>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_write+0x26>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	08 95       	ret
		}
		else
		{
			PORTA |= (1<<pinNumber);	//write 1
 1a4:	4b b3       	in	r20, 0x1b	; 27
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_write+0x46>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_write+0x42>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
		}
		break;
		
		//PORTB
		case PORT_B:
		if (value == LOW)
 1be:	41 11       	cpse	r20, r1
 1c0:	0e c0       	rjmp	.+28     	; 0x1de <DIO_write+0x72>
		{
			PORTB &= ~(1<<pinNumber);	//write 0
 1c2:	48 b3       	in	r20, 0x18	; 24
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_write+0x64>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_write+0x60>
 1d4:	cb 01       	movw	r24, r22
 1d6:	80 95       	com	r24
 1d8:	84 23       	and	r24, r20
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
		}
		else
		{
			PORTB |= (1<<pinNumber);	//write 1
 1de:	48 b3       	in	r20, 0x18	; 24
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	b9 01       	movw	r22, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write+0x80>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	8a 95       	dec	r24
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write+0x7c>
 1f0:	cb 01       	movw	r24, r22
 1f2:	84 2b       	or	r24, r20
 1f4:	88 bb       	out	0x18, r24	; 24
 1f6:	08 95       	ret
		}
		break;
		
		//PORTC
		case PORT_C:
		if (value == LOW)
 1f8:	41 11       	cpse	r20, r1
 1fa:	0e c0       	rjmp	.+28     	; 0x218 <DIO_write+0xac>
		{
			PORTC &= ~(1<<pinNumber);	//write 0
 1fc:	45 b3       	in	r20, 0x15	; 21
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	b9 01       	movw	r22, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_write+0x9e>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_write+0x9a>
 20e:	cb 01       	movw	r24, r22
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	85 bb       	out	0x15, r24	; 21
 216:	08 95       	ret
		}
		else
		{
			PORTC |= (1<<pinNumber);	//write 1
 218:	45 b3       	in	r20, 0x15	; 21
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	b9 01       	movw	r22, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write+0xba>
 222:	66 0f       	add	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	8a 95       	dec	r24
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write+0xb6>
 22a:	cb 01       	movw	r24, r22
 22c:	84 2b       	or	r24, r20
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
		}
		break;
		
		//PORTD
		case PORT_D:
		if (value == LOW)
 232:	41 11       	cpse	r20, r1
 234:	0e c0       	rjmp	.+28     	; 0x252 <DIO_write+0xe6>
		{
			PORTD &= ~(1<<pinNumber);	//write 0
 236:	42 b3       	in	r20, 0x12	; 18
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write+0xd8>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write+0xd4>
 248:	cb 01       	movw	r24, r22
 24a:	80 95       	com	r24
 24c:	84 23       	and	r24, r20
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret
		}
		else
		{
			PORTD |= (1<<pinNumber);	//write 1
 252:	42 b3       	in	r20, 0x12	; 18
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write+0xf4>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	8a 95       	dec	r24
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write+0xf0>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	82 bb       	out	0x12, r24	; 18
 26a:	08 95       	ret

0000026c <main>:
#include "DIO.h"
#include <util/delay.h>

int main(void)
{
	int x = 0 ;
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
	// set output pins for 3 led of traffic light
	for ( x ; x <3 ; x++)
 270:	06 c0       	rjmp	.+12     	; 0x27e <main+0x12>
	{
		DIO_init(x , PORT_A , OUT);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	61 e4       	ldi	r22, 0x41	; 65
 276:	8c 2f       	mov	r24, r28
 278:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>

int main(void)
{
	int x = 0 ;
	// set output pins for 3 led of traffic light
	for ( x ; x <3 ; x++)
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	c3 30       	cpi	r28, 0x03	; 3
 280:	d1 05       	cpc	r29, r1
 282:	bc f3       	brlt	.-18     	; 0x272 <main+0x6>
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	06 c0       	rjmp	.+12     	; 0x296 <main+0x2a>
	}
	
	//set output pins for 2 led of cross road 
	for ( x = 0 ; x <2 ; x++)
	{
		DIO_init(x , PORT_C , OUT);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	63 e4       	ldi	r22, 0x43	; 67
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	{
		DIO_init(x , PORT_A , OUT);
	}
	
	//set output pins for 2 led of cross road 
	for ( x = 0 ; x <2 ; x++)
 294:	21 96       	adiw	r28, 0x01	; 1
 296:	c2 30       	cpi	r28, 0x02	; 2
 298:	d1 05       	cpc	r29, r1
 29a:	bc f3       	brlt	.-18     	; 0x28a <main+0x1e>

	
    while (1) 
    {
		//code for traffic light each led on for 1 sec (red >> yellow >> green) & if red cross & if green do not cross
	for ( x = 0 ; x <3 ; x++)
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	2d c0       	rjmp	.+90     	; 0x2fc <main+0x90>
	{
		if (x == 0)
 2a2:	20 97       	sbiw	r28, 0x00	; 0
 2a4:	59 f4       	brne	.+22     	; 0x2bc <main+0x50>
		{
			DIO_write(1 , PORT_C , LOW);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	63 e4       	ldi	r22, 0x43	; 67
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>
			DIO_write(0 , PORT_C , HIGH);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	63 e4       	ldi	r22, 0x43	; 67
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>
 2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <main+0x68>
		}
		else if (x !=0 )
 2bc:	20 97       	sbiw	r28, 0x00	; 0
 2be:	51 f0       	breq	.+20     	; 0x2d4 <main+0x68>
		{
			DIO_write(0 , PORT_C , LOW);
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	63 e4       	ldi	r22, 0x43	; 67
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>
			DIO_write(1 , PORT_C , HIGH);
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	63 e4       	ldi	r22, 0x43	; 67
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>
		}
		DIO_write(x , PORT_A , HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	61 e4       	ldi	r22, 0x41	; 65
 2d8:	8c 2f       	mov	r24, r28
 2da:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	2f e7       	ldi	r18, 0x7F	; 127
 2e0:	8a e1       	ldi	r24, 0x1A	; 26
 2e2:	96 e0       	ldi	r25, 0x06	; 6
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x78>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x82>
 2ee:	00 00       	nop
		_delay_ms(2000);
		DIO_write(x , PORT_A , LOW);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	61 e4       	ldi	r22, 0x41	; 65
 2f4:	8c 2f       	mov	r24, r28
 2f6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_write>

	
    while (1) 
    {
		//code for traffic light each led on for 1 sec (red >> yellow >> green) & if red cross & if green do not cross
	for ( x = 0 ; x <3 ; x++)
 2fa:	21 96       	adiw	r28, 0x01	; 1
 2fc:	c3 30       	cpi	r28, 0x03	; 3
 2fe:	d1 05       	cpc	r29, r1
 300:	84 f2       	brlt	.-96     	; 0x2a2 <main+0x36>
 302:	cc cf       	rjmp	.-104    	; 0x29c <main+0x30>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
